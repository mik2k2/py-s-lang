#!/usr/bin/env python3
"""Use py-s-lang for a runner interface"""
import glob
import sys
import os
import subprocess
import argparse
import py_s_lang

__all__ = [
    'test',
    'insert_runner',
]


runner_code = """

# automatically generated by py-s-lang's insert_runner
if __name__ == '__main__':
    import sys
    try:
        import py_s_lang
    except ImportError:
        import runpy, types
        py_s_lang = types.SimpleNamespace(**runpy.run_path('{code_path}'))
    functions = py_s_lang.prepare_functions(globals(), include_builtins={include_builtins})
    py_s_lang.interpret(functions, [sys.argv[1:]])
# end automatically generated code
"""


def test():
    """run samples and compare output"""
    for name in glob.glob('examples/*.pysl.out'):
        r = subprocess.run(
            [sys.executable, 'py_s_lang.py', '-f', name[:-6], name[:-4]],
            capture_output=True,
        )
        with open(name, 'rb') as f:
            expected_output = f.read()
        assert not r.returncode, r.stderr
        assert r.stdout == expected_output, (r.stdout, expected_output)
        print(name, 'passed')


def insert_runner(file: argparse.FileType('a'), include_builtins: bool = False):
    """add runner code to the given file"""
    py_s_lang_path = os.path.relpath(py_s_lang.__file__)
    file.write(runner_code.format(
        code_path=py_s_lang_path,
        include_builtins=include_builtins,
    ))
    file.close()


# typed manually for the last time
if __name__ == '__main__':
    functions = py_s_lang.prepare_functions(globals(), include_builtins=False)
    py_s_lang.interpret(functions, [sys.argv[1:]])
